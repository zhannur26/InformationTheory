PART 1
def block(encoded):
    lst = []
    b = []
    for i in encoded:
        b.append(i)
        if len(b) == 8:
            a = ''.join(b)
            lst.append(a)
            b = []   
        
    blocks ={}
    j = 1
    block = 'block '
    for i in lst:
        blocks[block +str(j)] = i
        j+=1
    return blocks
blocks8 = block(encoded8[0])
j = 1
print('Original file:',encoded8[0])
print()
print('Initial blocks:')
for i in blocks8.values():
    print('b'+str(j),':',i)
    j+=1


PART 2 
from random import randint
def ErrorGen(percent,bitstring):
    lst = []
    b = []
    for i in bitstring:
        b.append(i)
        if len(b) == 8:
            a = ''.join(b)
            lst.append(a)
            b = []
    blocks ={}
    j = 1
    block = 'block '
    for i in lst:
        blocks[block +str(j)] = i
        j+=1
    num_blocks = int(len(blocks)*percent*0.01)

    lst = list(blocks.values())
    import random
    random_nums = random.sample(range(1, len(blocks)), num_blocks)
    err_blocks = []
    for i in random_nums:
        j = random.randint(1,7)
        if int(lst[i-1][j])==0:
            lst[i-1]=lst[i-1][:j]+str(1)+lst[i-1][j+1:]
            blocks['block '+str(i)] = lst[i-1]
        elif int(lst[i-1][j])==1:
            lst[i-1]=lst[i-1][:j]+str(0)+lst[i-1][j+1:]
            blocks['block '+str(i)] = lst[i-1]
        err_blocks.append(lst[i-1])
    j = 1
    print('Blocks with error:')
    for i in err_blocks:
        print('b'+str(j)+':',i)
        j+=1
    corrupted_string = ''
    for i in blocks.values():
        corrupted_string+=i
    return corrupted_string
err = ErrorGen(30,encoded8[0])


PART 3 and 4 
def HammingDecode2(bitstring):
    lst = []
    b = []
    for i in bitstring:
        b.append(i)
        if len(b) == 8:
            a = ''.join(b)
            lst.append(a)
            b = []
    blocks ={}
    j = 1
    
    block = 'block '
    for i in lst:
        blocks[block +str(j)] = i
        j+=1
    k = 0
    decoded = ''
    for i in blocks.values():
        k+=1
        p0 = i[0]
        p1 = i[1]
        p2 = i[2]
        p3 = i[4]
        print(i,':')
        print('Checking parity bits:')
        a = int(i[3])+int(i[5])+int(i[7])
        err_count = 0
        if a % 2 == 0:
            if int(p1) == 0:
                print('p1:b3+b5+b7=',i[3],'+',i[5],'+',i[7],'=',p1,'correct.' )
            else:
                print('p1:b3+b5+b7=',i[3],'+',i[5],'+',i[7],'=',p1,'incorrect.' )  
                err_count+=1
        else:
            if int(p1) == 1:
                print('p1:b3+b5+b7=',i[3],'+',i[5],'+',i[7],'=',p1,'correct.' )
            else:
                print('p1:b3+b5+b7=',i[3],'+',i[5],'+',i[7],'=',p1,'incorrect.' )
                err_count+=1
            
        a = int(i[3])+int(i[6])+int(i[7])
        if a % 2 == 0:
            if int(p2) ==0:
                print('p2:b3+b6+b7=',i[3],'+',i[6],'+',i[7],'=',p2,'correct.' )
            else:
                print('p2:b3+b6+b7=',i[3],'+',i[6],'+',i[7],'=',p2,'incorrect.' )
                err_count+=2
        else:
            if int(p2) ==1:
                print('p2:b3+b6+b7=',i[3],'+',i[6],'+',i[7],'=',p2,'correct.' )
            else:
                print('p2:b3+b6+b7=',i[3],'+',i[6],'+',i[7],'=',p2,'incorrect.' )
                err_count+=2
                
        a = int(i[5])+int(i[6])+int(i[7])
        if a % 2 == 0:
            if int(p3) == 0:
                print('p1:b5+b6+b7=',i[5],'+',i[6],'+',i[7],'=',p3,'correct.' )
            else:
                print('p1:b5+b6+b7=',i[5],'+',i[6],'+',i[7],'=',p3,'incorrect.' )  
                err_count+=4
        else:
            if int(p3) == 1:
                print('p1:b3+b5+b7=',i[5],'+',i[6],'+',i[7],'=',p3,'correct.' )
            else:
                print('p1:b3+b5+b7=',i[5],'+',i[6],'+',i[7],'=',p3,'incorrect.' )
                err_count+=4
    
        summa = int(p1)+int(p2)+int(p3)+int(i[3])+int(i[5])+int(i[6])+int(i[7])
        if summa % 2 == 0:
            if int(p0)==0:
                print('p0:b1+b2+b3+b4+b5+b6+b7=',p1,'+',p2,'+',i[3],'+',p3,'+',i[5],'+',i[6],'+',i[7],'=',p0,'correct.' )
            else:
                print('p0:b1+b2+b3+b4+b5+b6+b7=',p1,'+',p2,'+',i[3],'+',p3,'+',i[5],'+',i[6],'+',i[7],'=',p0,'incorrect.' )
        else:
            if int(p0)==1:
                print('p0:b1+b2+b3+b4+b5+b6+b7=',p1,'+',p2,'+',i[3],'+',p3,'+',i[5],'+',i[6],'+',i[7],'=',p0,'correct.' )
            else:
                print('p0:b1+b2+b3+b4+b5+b6+b7=',p1,'+',p2,'+',i[3],'+',p3,'+',i[5],'+',i[6],'+',i[7],'=',p0,'incorrect.' )
        
        lst = list(blocks.values())
        if err_count==0:
            print('No error')
        else:
            print('Error in position:',err_count)
            
            if lst[k-1][err_count] =='0':
                b = lst[k-1][:err_count]+str(1)+lst[k-1][err_count+1:]
                blocks['block '+str(k)] = b
            else:
                b = lst[k-1][:err_count]+str(0)+lst[k-1][err_count+1:]
                blocks['block '+str(k)] = b
                
            print('Correcting bit string:',blocks['block '+str(k)])
        decoded_blocks=''
        
        for i in range(8):
            if i==3 or i>=5:
                decoded_blocks+=blocks['block '+str(k)][i]
        decoded+=decoded_blocks
        print('Decoding bitstring: ',decoded_blocks)
        
    return decoded
decoded = HammingDecode2(err)


PART 5 
 print('Decoded sequence:',decoded[:len(decoded)-encoded8[1]])
print('Sequence from assignment 3:',txt1)
if decoded[:len(decoded)-encoded8[1]] ==txt1:
    print('They match.')
