PART 1
lst = []
b = []

for i in encoded16[0]:
    b.append(i)
    
    if len(b) == 16:
        a = ''.join(b)
        lst.append(a)
        b = []
blocks ={}
j = 1
block = 'block '
for i in lst:
    blocks[block +str(j)] = i
    j+=1
a = 1
print('Original file:',encoded16[0])
print()
print('Initial blocks:')
for i in blocks.values():
    print('b'+str(a),':',i)
    a=a+1
    
PART 2
    
import random
def ErrorGen(percent,bitstring):
    lst = []
    b = []
    for i in bitstring:
        b.append(i)
        if len(b) == 16:
            a = ''.join(b)
            lst.append(a)
            b = []
    blocks ={}
    j = 1
    block = 'block '
    for i in lst:
        blocks[block +str(j)] = i
        j+=1
    a = 1
    
    num_blocks = int(len(blocks)*percent*0.01)

    lst = list(blocks.values())
    random_nums = random.sample(range(1, len(blocks)), num_blocks)
    err_blocks = []
    for i in random_nums:
        j = random.randint(1,15)
        if int(lst[i-1][j])==0:
            lst[i-1]=lst[i-1][:j]+str(1)+lst[i-1][j+1:]
            blocks['block '+str(i)] = lst[i-1]
        elif int(lst[i-1][j])==1:
            lst[i-1]=lst[i-1][:j]+str(0)+lst[i-1][j+1:]
            blocks['block '+str(i)] = lst[i-1]
        err_blocks.append(lst[i-1])
    j = 1
    print('Blocks with error:')
    for i in err_blocks:
        print('b'+str(j)+':',i)
        j+=1
    corrupted_string = ''
    for i in blocks.values():
        corrupted_string+=i
    return corrupted_string
errString = ErrorGen(50,encoded16[0])
errString


PART 3 and 4

HammingDecode(bitstring):
    lst = []
    b = []
    for i in bitstring:
        b.append(i)
        if len(b) == 16:
            a = ''.join(b)
            lst.append(a)
            b = []
    blocks ={}
    j = 1
    
    block = 'block '
    for i in lst:
        blocks[block +str(j)] = i
        j+=1
    k = 0
    decoded = ''
    for i in blocks.values():
        err_count = 0
        column =0
        row = 0
        k+=1
        print(i,':')
        print('Checking columns:')
        a = int(i[1])+int(i[5])+int(i[9])+int(i[13])+int(i[3])+int(i[7])+int(i[11])+int(i[15])
        if a % 2 == 0:
            print('b1+b3+b5+b7+b9+b11+b13+b15=',i[1],'+',i[3],'+',i[5],'+',i[7],'+',i[9],'+',i[11],'+',i[13],'+',i[15],'=','2 and 4 columns are correct.' )
        else:
            print('b3+b5+b7+b9+b11+b13+b15=',i[1],'+',i[3],'+',i[5],'+',i[7],'+',i[9],'+',i[11],'+',i[13],'+',i[15],'=','2 or 4 column is incorrect.' ) 
            err_count+=1
        a = int(i[0])+int(i[4])+int(i[8])+int(i[12])+int(i[2])+int(i[6])+int(i[10])+int(i[14])
        if a % 2 == 0:
            print('b0+b2+b4+b6+b8+b10+b12+b14=',i[0],'+',i[2],'+',i[4],'+',i[6],'+',i[8],'+',i[10],'+',i[12],'+',i[14],'=','1 and 3 columns are correct.' )
        else:
            print('b0+b2+b4+b6+b8+b10+b12+b14=',i[0],'+',i[2],'+',i[4],'+',i[6],'+',i[8],'+',i[10],'+',i[12],'+',i[14],'=','1 or 3 column is incorrect.' ) 
            err_count+=2
            
        a = int(i[2])+int(i[6])+int(i[10])+int(i[14])+int(i[3])+int(i[7])+int(i[11])+int(i[15])
        if a%2 == 0:
                print('b2+b3+b6+b7+b10+b11+b14+b15=',i[2],'+',i[3],'+',i[6],'+',i[7],'+',i[10],'+',i[11],'+',i[14],'+',i[15],'=','3 and 4 columns are correct.' )
        else:
            if err_count==1:
                print('b2+b3+b6+b7+b10+b11+b14+b15=',i[2],'+',i[3],'+',i[6],'+',i[7],'+',i[10],'+',i[11],'+',i[14],'+',i[15],'=',' Error in 4 column.' )
                column = 4
            elif err_count==2:
                print('b2+b3+b6+b7+b10+b11+b14+b15=',i[2],'+',i[3],'+',i[6],'+',i[7],'+',i[10],'+',i[11],'+',i[14],'+',i[15],'=',' Error in 3 column.' )
                column = 3
        a = int(i[0])+int(i[1])+int(i[4])+int(i[5])+int(i[8])+int(i[9])+int(i[13])+int(i[12])
        if a%2 == 0:
                print('b0+b1+b4+b5+b8+b9+b12+b13=',i[0],'+',i[1],'+',i[4],'+',i[5],'+',i[8],'+',i[9],'+',i[12],'+',i[13],'=','1 and 2 columns are correct.' )
        else:
            if err_count==1:
                print('b0+b1+b4+b5+b8+b9+b12+b13=',i[0],'+',i[1],'+',i[4],'+',i[5],'+',i[8],'+',i[9],'+',i[12],'+',i[13],'=',' Error in 2 column.' )
                column = 2
            elif err_count==2:
                print('b0+b1+b4+b5+b8+b9+b12+b13=',i[0],'+',i[1],'+',i[4],'+',i[5],'+',i[8],'+',i[9],'+',i[12],'+',i[13],'=',' Error in 1 column.' )
                column = 1
        err_count =0
        print('Checking rows:')
        a = int(i[4])+int(i[5])+int(i[6])+int(i[7])+int(i[12])+int(i[13])+int(i[14])+int(i[15])
        if a % 2 == 0:
            print('b4+b5+b6+b7+b12+b13+b14+b15=',i[4],'+',i[5],'+',i[6],'+',i[7],'+',i[12],'+',i[13],'+',i[14],'+',i[15],'=','2 and 4 rows are correct.' )
        else:
            print('b3+b5+b7+b9+b11+b13+b15=',i[1],'+',i[3],'+',i[5],'+',i[7],'+',i[9],'+',i[11],'+',i[13],'+',i[15],'=','2 or 4 row is incorrect.' ) 
            err_count+=1
        a = int(i[0])+int(i[1])+int(i[2])+int(i[3])+int(i[8])+int(i[9])+int(i[10])+int(i[11])
        if a % 2 == 0:
            print('b0+b1+b2+b3+b8+b9+b10+b11=',i[0],'+',i[1],'+',i[2],'+',i[3],'+',i[8],'+',i[9],'+',i[10],'+',i[11],'=','1 and 3 rows are correct.' )
        else:
            print('b0+b1+b2+b3+b8+b9+b10+b11=',i[0],'+',i[1],'+',i[2],'+',i[3],'+',i[8],'+',i[9],'+',i[10],'+',i[11],'=','1 or 3 row is incorrect.' ) 
            err_count+=2
        
        a = int(i[8])+int(i[9])+int(i[10])+int(i[11])+int(i[12])+int(i[13])+int(i[14])+int(i[15])
        if a%2 == 0:
                print('b8+b9+b10+b11+b12+b13+b14+b15=',i[8],'+',i[9],'+',i[10],'+',i[11],'+',i[12],'+',i[13],'+',i[14],'+',i[15],'=','3 and 4 rows are correct.' )
        else:
            if err_count==1:
                print('b8+b9+b10+b11+b12+b13+b14+b15=',i[8],'+',i[9],'+',i[10],'+',i[11],'+',i[12],'+',i[13],'+',i[14],'+',i[15],'=',' Error in 4 row.' )
                row = 4
            elif err_count==2:
                print('b8+b9+b10+b11+b12+b13+b14+b15=',i[8],'+',i[9],'+',i[10],'+',i[11],'+',i[12],'+',i[13],'+',i[14],'+',i[15],'=',' Error in 3 row.' )
                row = 3
        a = int(i[0])+int(i[1])+int(i[2])+int(i[3])+int(i[4])+int(i[5])+int(i[6])+int(i[7])
        if a%2 == 0:
                print('b0+b1+b2+b3+b4+b5+b6+b7=',i[0],'+',i[1],'+',i[2],'+',i[3],'+',i[4],'+',i[5],'+',i[6],'+',i[7],'=','1 and 2 rows are correct.' )
        else:
            if err_count==1:
                print('b0+b1+b2+b3+b4+b5+b6+b7=',i[0],'+',i[1],'+',i[2],'+',i[3],'+',i[4],'+',i[5],'+',i[6],'+',i[7],'=',' Error in 2 row.' )
                row = 2
            elif err_count==2:
                print('b0+b1+b2+b3+b4+b5+b6+b7=',i[0],'+',i[1],'+',i[2],'+',i[3],'+',i[4],'+',i[5],'+',i[6],'+',i[7],'=',' Error in 1 row.' )
                row = 1
        if column==0 and row==0:
            print('No error')
        else:
            position = (row-1)*4+(column-1)
            print('Error in position:',position)
            
            if lst[k-1][position] =='0':
                b = lst[k-1][:position]+str(1)+lst[k-1][position+1:]
                blocks['block '+str(k)] = b
            else:
                b = lst[k-1][:position]+str(0)+lst[k-1][position+1:]
                blocks['block '+str(k)] = b
                
            print('Correcting bit string:',blocks['block '+str(k)])
        decoded_blocks=''
        decoded_blocks=blocks['block '+str(k)][3]+blocks['block '+str(k)][5:8]+blocks['block '+str(k)][9:]
        decoded+=decoded_blocks
        print('Decoding bitstring: ',decoded_blocks)
        print()
    return decoded
decod = HammingDecode(errString)

PART 5 

print('Decoded sequence:',decod[:len(decod)-encoded16[1]])
print('Sequence from assignment 3:',txt1)
if decod[:len(decod)-encoded16[1]] ==txt1:
    print('They match.')
