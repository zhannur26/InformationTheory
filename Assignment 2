with open("text.txt","r") as f:
    txt = f.read()
n = len(txt)
uniq_symbols = set(txt)
dictionary = {}
for i in uniq_symbols:
    dictionary[i] = round(txt.count(i)/n,3)
#sort dictionary in descending order by value
sorted_dictionary = sorted(dictionary.items(), key = lambda  kv:(kv[1], kv[0]),reverse = True)
for i in sorted_dictionary:
    print(i[0],'-',i[1])



symbols = [l + (''.join(''),) for l in sorted_dictionary]
left = "0"
right = "1"
h=[]
def Huffman(lst):
# convert list of tuples to the list of lists
    h = [[*row] for row in lst]
    b = 1
    while len(lst)>1:
        # find less frequent symbol and remove this symbol from the list
        min1 =list(min(lst, key = lambda t: t[1]))
        lst.remove(min(lst, key = lambda t: t[1]))
        # find second less frequent symbol and remove this symbol from the list
        min2 = list(min(lst, key = lambda t: t[1]))
        lst.remove(min(lst, key = lambda t: t[1]))
        
        
         #to the new list add symbols with code
        for j in h:
            for k in min1[0]:
                if j[0]==k:
                    j[2]=j[2]+left
                
            for k in min2[0]:
                if j[0]==k:
                    j[2]=j[2]+right
                    
        
        summa = min1[1] + min2[1]
        lst.append((min1[0]+min2[0],summa,min1[2]+min2[2]))
        print('Step',b,':')
        print(min1[0],'-',round(min1[1],3))
        print(min2[0],'-',round(min2[1],3))
        b=b+1
    return h
ans = Huffman(symbols)


